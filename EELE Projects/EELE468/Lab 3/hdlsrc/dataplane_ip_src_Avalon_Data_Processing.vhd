-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\lab3_p9\dataplane_ip_src_Avalon_Data_Processing.vhd
-- Created: 2020-04-17 18:41:15
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: dataplane_ip_src_Avalon_Data_Processing
-- Source Path: lab3_p9/dataplane/Avalon Data Processing
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY dataplane_ip_src_Avalon_Data_Processing IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Sink_Data                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Sink_Channel                      :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        Left_Gain                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Right_Gain                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Max_Reset_Threshold               :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18
        LED_persistence                   :   IN    std_logic_vector(14 DOWNTO 0);  -- ufix15
        Enable                            :   IN    std_logic;
        Source_Data                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Source_Channel                    :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        LED                               :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END dataplane_ip_src_Avalon_Data_Processing;


ARCHITECTURE rtl OF dataplane_ip_src_Avalon_Data_Processing IS

  -- Component Declarations
  COMPONENT dataplane_ip_src_Left_Channel_Processing
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Left_Data_In                    :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Left_Gain                       :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Max_Reset_Threshold             :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18
          LED_persistence                 :   IN    std_logic_vector(14 DOWNTO 0);  -- ufix15
          Enable                          :   IN    std_logic;
          Left_Data_Out                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          LED                             :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT dataplane_ip_src_Right_Channel_Processing
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Right_Data_In                   :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Right_Gain                      :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Enable                          :   IN    std_logic;
          Right_Data_Out                  :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataplane_ip_src_Left_Channel_Processing
    USE ENTITY work.dataplane_ip_src_Left_Channel_Processing(rtl);

  FOR ALL : dataplane_ip_src_Right_Channel_Processing
    USE ENTITY work.dataplane_ip_src_Right_Channel_Processing(rtl);

  -- Signals
  SIGNAL Enable_out7                      : std_logic;
  SIGNAL Sink_Channel_unsigned            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Compare_To_Constant_out1_1       : std_logic;
  SIGNAL Left_Channel_Processing_out1     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Left_Channel_Processing_out2     : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Left_Channel_Processing_out1_signed : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Compare_To_Constant1_out1_1      : std_logic;
  SIGNAL Right_Channel_Processing_out1    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Right_Channel_Processing_out1_signed : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Sink_Data_signed                 : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Multiport_Switch_out1            : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Multiport_Switch_out1_bypass     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Multiport_Switch_out1_last_value : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Sink_Channel_bypass              : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Sink_Channel_last_value          : unsigned(1 DOWNTO 0);  -- ufix2

BEGIN
  u_Left_Channel_Processing : dataplane_ip_src_Left_Channel_Processing
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Left_Data_In => Sink_Data,  -- sfix32_En28
              Left_Gain => Left_Gain,  -- sfix32_En28
              Max_Reset_Threshold => Max_Reset_Threshold,  -- ufix18
              LED_persistence => LED_persistence,  -- ufix15
              Enable => Compare_To_Constant_out1_1,
              Left_Data_Out => Left_Channel_Processing_out1,  -- sfix32_En28
              LED => Left_Channel_Processing_out2  -- uint8
              );

  u_Right_Channel_Processing : dataplane_ip_src_Right_Channel_Processing
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Right_Data_In => Sink_Data,  -- sfix32_En28
              Right_Gain => Right_Gain,  -- sfix32_En28
              Enable => Compare_To_Constant1_out1_1,
              Right_Data_Out => Right_Channel_Processing_out1  -- sfix32_En28
              );

  Enable_out7 <= Enable;

  Sink_Channel_unsigned <= unsigned(Sink_Channel);

  
  Compare_To_Constant_out1 <= '1' WHEN Sink_Channel_unsigned = to_unsigned(16#0#, 2) ELSE
      '0';

  Compare_To_Constant_out1_1 <= Compare_To_Constant_out1 AND Enable_out7;

  Left_Channel_Processing_out1_signed <= signed(Left_Channel_Processing_out1);

  
  Compare_To_Constant1_out1 <= '1' WHEN Sink_Channel_unsigned = to_unsigned(16#1#, 2) ELSE
      '0';

  Compare_To_Constant1_out1_1 <= Compare_To_Constant1_out1 AND Enable_out7;

  Right_Channel_Processing_out1_signed <= signed(Right_Channel_Processing_out1);

  Sink_Data_signed <= signed(Sink_Data);

  
  Multiport_Switch_out1 <= Left_Channel_Processing_out1_signed WHEN Sink_Channel_unsigned = to_unsigned(16#0#, 2) ELSE
      Right_Channel_Processing_out1_signed WHEN Sink_Channel_unsigned = to_unsigned(16#1#, 2) ELSE
      Sink_Data_signed;

  Source_Data_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiport_Switch_out1_last_value <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiport_Switch_out1_last_value <= Multiport_Switch_out1_bypass;
      END IF;
    END IF;
  END PROCESS Source_Data_bypass_process;


  
  Multiport_Switch_out1_bypass <= Multiport_Switch_out1_last_value WHEN Enable_out7 = '0' ELSE
      Multiport_Switch_out1;

  Source_Data <= std_logic_vector(Multiport_Switch_out1_bypass);

  Source_Channel_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sink_Channel_last_value <= to_unsigned(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Sink_Channel_last_value <= Sink_Channel_bypass;
      END IF;
    END IF;
  END PROCESS Source_Channel_bypass_process;


  
  Sink_Channel_bypass <= Sink_Channel_last_value WHEN Enable_out7 = '0' ELSE
      Sink_Channel_unsigned;

  Source_Channel <= std_logic_vector(Sink_Channel_bypass);

  LED <= Left_Channel_Processing_out2;

END rtl;

